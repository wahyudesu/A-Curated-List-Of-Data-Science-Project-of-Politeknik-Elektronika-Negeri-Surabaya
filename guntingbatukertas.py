# -*- coding: utf-8 -*-
"""GuntingBatuKertas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CesSWOOXn_nvh5rCYaDPIzWS5yKC85bO

# Dicoding: Rock Scissor Paper
- Nama: Wahyu Ikbal Maulana
- Email: wahyuikbal777@gmail.com
- Id Dicoding: wahyudesu

#Import library
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import layers, models
from keras.preprocessing import image

from google.colab import files

"""# Load dataset"""

!wget --no-check-certificate \
        https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip -O rockpaperscissors.zip

import zipfile,os
local_zip = '/content/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

directory = '/content/rockpaperscissors/rps-cv-images'
directory

"""# Applying Data Augmentation"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator

datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    vertical_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest',
                    validation_split = 0.4
                    )

"""# Training set & Validation set"""

# Data generator for training the model
train_generator = datagen.flow_from_directory(
    directory,
    target_size=(100, 150),     # Chosen target image size
    class_mode="categorical",   # Image data classified into multiple classes
    subset='training'           # Fetching training data from directory
)

# Data generator for validating the model
val_generator = datagen.flow_from_directory(
    directory,
    target_size=(100, 150),     # Chosen target image size
    class_mode="categorical",   # Image data classified into multiple classes
    subset='validation'         # Fetching validation data from directory
)

train_generator.class_indices

"""# Defining the CNN Model

"""

model = tf.keras.models.Sequential([
    # Creating a sequential model
    # The input shape is an image with size 150x150 and 3 color channels
    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(100, 150, 3)),  # First convolutional layer
    tf.keras.layers.MaxPooling2D(2, 2),

    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),                             # Second convolutional layer
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),                             # Third convolutional layer
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Flatten(),                                                        # Input layer for the Deep Learning Neural Network
    tf.keras.layers.Dropout(0.5),

    tf.keras.layers.Dense(128, activation='relu'),                                   # First hidden layer with 128 neurons

    tf.keras.layers.Dense(512, activation='relu'),                                   # Second hidden layer with 512 neurons

    tf.keras.layers.Dense(3, activation='softmax')                                   # Output layer
])

model.summary()
Model: "Sequential"

"""# Compiling the model"""

model.compile(
    loss = 'categorical_crossentropy',
    optimizer = tf.optimizers.Adam(),
    metrics = ['accuracy']
)

history = model.fit(
      train_generator,
      steps_per_epoch=25,  # Number of batches to be executed in each epoch
      epochs=21,  # Increase the number of epochs if the model accuracy is not optimal yet
      validation_data=val_generator,  # Display the accuracy during validation data testing
      validation_steps=5,  # Number of batches to be executed in each epoch of validation
      verbose=1)

"""#Training and Validation Accuracy Plots"""

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.5, 1])
plt.legend(loc='lower right')
plt.grid(True)
plt.show()

"""# Image Prediction"""

uploaded = files.upload()

for fn in uploaded.keys():
    path = fn
    img = image.load_img(path, target_size=(100,150))
    imgplot = plt.imshow(img)
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)

    images = np.vstack([x])
    classes = model.predict(images, batch_size=10)

    if classes[0,0]!=0:
        print('image ('+fn+') is paper')
    elif classes[0,1]!=0:
        print('image ('+fn+') is rock')
    elif classes[0,2]!=0:
        print('image ('+fn+') is scissor')
    else:
        print('unknown')